<?php

$directoryCardsImg = "./cardsimg/";
$directoryCatalogsImg = "./catalogsimg/";
$needFeedbackModeration = 1; // 0 - отзывы необходимо отправлять на модерацию; 1 - отзывы принимаются без модерирования

// ------------------- Подключение к БД ---------------------

// $connection = mysqli_connect('localhost', 'root', '', 'stoevamk_db');
$connection = mysqli_connect('localhost', 'stoevamk_db', 'Y15xj%*k', 'stoevamk_db');


if ($connection == false) {
    echo 'Не удалось подключиться к базе данных';
    echo mysqli_connect_error();
    exit(); //Если база не подключена, дальше весь код не выполняется
}
// ------------------------------------------------------------



// setcookie('userid', "2", 0x7FFFFFFF);
// setcookie('usercode', "5ed81c8ad6dacd152160", 0x7FFFFFFF);


//----------------------- Проверка на админа -----------------------
$visitorType = 'Guest';
$visitorId = '0';
if (isset($_COOKIE["userid"]) && isset($_COOKIE["usercode"])) { //Если куки содержат userid и usercode
    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `id` = " . $_COOKIE["userid"]));
    if ($user && $user['code'] == $_COOKIE["usercode"]) { //Если такой юзер есть и его код соответствует БД
        $user['admin'] == 1 ? $visitorType = 'Admin' : $visitorType = 'User';
        $visitorId = $_COOKIE["userid"];
    }
}

// ----------------------------- Вход ------------------------------
if (isset($_GET['cookies']) && $_GET['cookies'] == '1' && isset($_GET['email']) && $_GET['email'] != '' && isset($_GET['pass']) && $_GET['pass'] != '') {
    $email = $_GET['email'];
    $pass = md5($_GET['pass']);
    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
    if ($user) {
        if ($pass == $user['password']) {
            setcookie('userid', $user['id'], 0x7FFFFFFF);
            setcookie('usercode', $user['code'], 0x7FFFFFFF);
            echo json_encode("correct");
        } else {
            echo json_encode("incorrectPass");
        }
    } else {
        echo json_encode("incorrectEmail");
    }
}

// ----------------------------- Выход ------------------------------
if (isset($_GET['cookies']) && $_GET['cookies'] == 'logout') {
    setcookie('userid', "", 0x7FFFFFFF);
    setcookie('usercode', "", 0x7FFFFFFF);
    echo json_encode("correct");
}

// --------------------- Подтверждение почты ---------------------
if (isset($_GET['loginmail'])) {
    $email = $_GET['loginmail'];
    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
    if ($user) echo json_encode("already_have");
    else {
        $code = substr(md5(rand()), 0, 4);
        if (mail($_GET['loginmail'], 'Регистрация на сайте Расту, играя', "Код подтверждения для регистрации на сайте:\n" . $code . "\n\nРегистрируясь на платформе https://rastu-igraya.ru/, вы даете согласие на обработку ваших персональных данных.\n
            
            Политика конфиденциальности

            1. Общие положения
            Настоящая политика обработки персональных данных составлена в соответствии с требованиями Федерального закона от 27.07.2006. №152-ФЗ «О персональных данных» (далее — Закон о персональных данных) и определяет порядок обработки персональных данных и меры по обеспечению безопасности персональных данных, предпринимаемые владельцем сайта (далее – Оператор).
            1.1. Оператор ставит своей важнейшей целью и условием осуществления своей деятельности соблюдение прав и свобод человека и гражданина при обработке его персональных данных, в том числе защиты прав на неприкосновенность частной жизни, личную и семейную тайну.
            1.2. Настоящая политика Оператора в отношении обработки персональных данных (далее – Политика) применяется ко всей информации, которую Оператор может получить о посетителях веб-сайта https://rastu-igraya.ru.
            
            2. Основные понятия, используемые в Политике
            2.1. Автоматизированная обработка персональных данных – обработка персональных данных с помощью средств вычислительной техники.
            2.2. Блокирование персональных данных – временное прекращение обработки персональных данных (за исключением случаев, если обработка необходима для уточнения персональных данных).
            2.3. Веб-сайт – совокупность графических и информационных материалов, а также программ для ЭВМ и баз данных, обеспечивающих их доступность в сети интернет по сетевому адресу https://rastu-igraya.ru.
            2.4. Информационная система персональных данных — совокупность содержащихся в базах данных персональных данных, и обеспечивающих их обработку информационных технологий и технических средств.
            2.5. Обезличивание персональных данных — действия, в результате которых невозможно определить без использования дополнительной информации принадлежность персональных данных конкретному Пользователю или иному субъекту персональных данных.
            2.6. Обработка персональных данных – любое действие (операция) или совокупность действий (операций), совершаемых с использованием средств автоматизации или без использования таких средств с персональными данными, включая сбор, запись, систематизацию, накопление, хранение, уточнение (обновление, изменение), извлечение, использование, передачу (распространение, предоставление, доступ), обезличивание, блокирование, удаление, уничтожение персональных данных.
            2.7. Оператор – государственный орган, муниципальный орган, юридическое или физическое лицо, самостоятельно или совместно с другими лицами организующие и (или) осуществляющие обработку персональных данных, а также определяющие цели обработки персональных данных, состав персональных данных, подлежащих обработке, действия (операции), совершаемые с персональными данными.
            2.8. Персональные данные – любая информация, относящаяся прямо или косвенно к определенному или определяемому Пользователю веб-сайта https://rastu-igraya.ru.
            2.9. Персональные данные, разрешенные субъектом персональных данных для распространения, — персональные данные, доступ неограниченного круга лиц к которым предоставлен субъектом персональных данных путем дачи согласия на обработку персональных данных, разрешенных субъектом персональных данных для распространения в порядке, предусмотренном Законом о персональных данных (далее — персональные данные, разрешенные для распространения).
            2.10. Пользователь – любой посетитель веб-сайта https://rastu-igraya.ru.
            2.11. Предоставление персональных данных – действия, направленные на раскрытие персональных данных определенному лицу или определенному кругу лиц.
            2.12. Распространение персональных данных – любые действия, направленные на раскрытие персональных данных неопределенному кругу лиц (передача персональных данных) или на ознакомление с персональными данными неограниченного круга лиц, в том числе обнародование персональных данных в средствах массовой информации, размещение в информационно-телекоммуникационных сетях или предоставление доступа к персональным данным каким-либо иным способом.
            2.13. Трансграничная передача персональных данных – передача персональных данных на территорию иностранного государства органу власти иностранного государства, иностранному физическому или иностранному юридическому лицу.
            2.14. Уничтожение персональных данных – любые действия, в результате которых персональные данные уничтожаются безвозвратно с невозможностью дальнейшего восстановления содержания персональных данных в информационной системе персональных данных и (или) уничтожаются материальные носители персональных данных.
            
            3. Основные права и обязанности Оператора
            3.1. Оператор имеет право:
            – получать от субъекта персональных данных достоверные информацию и/или документы, содержащие персональные данные;
            – в случае отзыва субъектом персональных данных согласия на обработку персональных данных Оператор вправе продолжить обработку персональных данных без согласия субъекта персональных данных при наличии оснований, указанных в Законе о персональных данных;
            – самостоятельно определять состав и перечень мер, необходимых и достаточных для обеспечения выполнения обязанностей, предусмотренных Законом о персональных данных и принятыми в соответствии с ним нормативными правовыми актами, если иное не предусмотрено Законом о персональных данных или другими федеральными законами.
            3.2. Оператор обязан:
            – предоставлять субъекту персональных данных по его просьбе информацию, касающуюся обработки его персональных данных;
            – организовывать обработку персональных данных в порядке, установленном действующим законодательством РФ;
            – отвечать на обращения и запросы субъектов персональных данных и их законных представителей в соответствии с требованиями Закона о персональных данных;
            – сообщать в уполномоченный орган по защите прав субъектов персональных данных по запросу этого органа необходимую информацию в течение 30 дней с даты получения такого запроса;
            – публиковать или иным образом обеспечивать неограниченный доступ к настоящей Политике в отношении обработки персональных данных;
            – принимать правовые, организационные и технические меры для защиты персональных данных от неправомерного или случайного доступа к ним, уничтожения, изменения, блокирования, копирования, предоставления, распространения персональных данных, а также от иных неправомерных действий в отношении персональных данных;
            – прекратить передачу (распространение, предоставление, доступ) персональных данных, прекратить обработку и уничтожить персональные данные в порядке и случаях, предусмотренных Законом о персональных данных;
            – исполнять иные обязанности, предусмотренные Законом о персональных данных.
            
            4. Основные права и обязанности субъектов персональных данных
            4.1. Субъекты персональных данных имеют право:
            – получать информацию, касающуюся обработки его персональных данных, за исключением случаев, предусмотренных федеральными законами. Сведения предоставляются субъекту персональных данных Оператором в доступной форме, и в них не должны содержаться персональные данные, относящиеся к другим субъектам персональных данных, за исключением случаев, когда имеются законные основания для раскрытия таких персональных данных. Перечень информации и порядок ее получения установлен Законом о персональных данных;
            – требовать от оператора уточнения его персональных данных, их блокирования или уничтожения в случае, если персональные данные являются неполными, устаревшими, неточными, незаконно полученными или не являются необходимыми для заявленной цели обработки, а также принимать предусмотренные законом меры по защите своих прав;
            – выдвигать условие предварительного согласия при обработке персональных данных в целях продвижения на рынке товаров, работ и услуг;
            – на отзыв согласия на обработку персональных данных;
            – обжаловать в уполномоченный орган по защите прав субъектов персональных данных или в судебном порядке неправомерные действия или бездействие Оператора при обработке его персональных данных;
            – на осуществление иных прав, предусмотренных законодательством РФ.
            4.2. Субъекты персональных данных обязаны:
            – предоставлять Оператору достоверные данные о себе;
            – сообщать Оператору об уточнении (обновлении, изменении) своих персональных данных.
            4.3. Лица, передавшие Оператору недостоверные сведения о себе, либо сведения о другом субъекте персональных данных без согласия последнего, несут ответственность в соответствии с законодательством РФ.
            
            5. Оператор может обрабатывать следующие персональные данные Пользователя
            5.1. Фамилия, имя, отчество.
            5.2. Электронный адрес.
            5.3. Также на сайте происходит сбор и обработка обезличенных данных о посетителях (в т.ч. файлов «cookie») с помощью сервисов интернет-статистики (Яндекс Метрика и Гугл Аналитика и других).
            5.4. Вышеперечисленные данные далее по тексту Политики объединены общим понятием Персональные данные.
            5.5. Обработка специальных категорий персональных данных, касающихся расовой, национальной принадлежности, политических взглядов, религиозных или философских убеждений, интимной жизни, Оператором не осуществляется.
            5.6. Обработка персональных данных, разрешенных для распространения, из числа специальных категорий персональных данных, указанных в ч. 1 ст. 10 Закона о персональных данных, допускается, если соблюдаются запреты и условия, предусмотренные ст. 10.1 Закона о персональных данных.
            5.7. Согласие Пользователя на обработку персональных данных, разрешенных для распространения, оформляется отдельно от других согласий на обработку его персональных данных. При этом соблюдаются условия, предусмотренные, в частности, ст. 10.1 Закона о персональных данных. Требования к содержанию такого согласия устанавливаются уполномоченным органом по защите прав субъектов персональных данных.
            5.7.1 Согласие на обработку персональных данных, разрешенных для распространения, Пользователь предоставляет Оператору непосредственно.
            5.7.2 Оператор обязан в срок не позднее трех рабочих дней с момента получения указанного согласия Пользователя опубликовать информацию об условиях обработки, о наличии запретов и условий на обработку неограниченным кругом лиц персональных данных, разрешенных для распространения.
            5.7.3 Передача (распространение, предоставление, доступ) персональных данных, разрешенных субъектом персональных данных для распространения, должна быть прекращена в любое время по требованию субъекта персональных данных. Данное требование должно включать в себя фамилию, имя, отчество (при наличии), контактную информацию (номер телефона, адрес электронной почты или почтовый адрес) субъекта персональных данных, а также перечень персональных данных, обработка которых подлежит прекращению. Указанные в данном требовании персональные данные могут обрабатываться только Оператором, которому оно направлено.
            5.7.4 Согласие на обработку персональных данных, разрешенных для распространения, прекращает свое действие с момента поступления Оператору требования, указанного в п. 5.10.3 настоящей Политики в отношении обработки персональных данных.
            
            6. Принципы обработки персональных данных
            6.1. Обработка персональных данных осуществляется на законной и справедливой основе.
            6.2. Обработка персональных данных ограничивается достижением конкретных, заранее определенных и законных целей. Не допускается обработка персональных данных, несовместимая с целями сбора персональных данных.
            6.3. Не допускается объединение баз данных, содержащих персональные данные, обработка которых осуществляется в целях, несовместимых между собой.
            6.4. Обработке подлежат только персональные данные, которые отвечают целям их обработки.
            6.5. Содержание и объем обрабатываемых персональных данных соответствуют заявленным целям обработки. Не допускается избыточность обрабатываемых персональных данных по отношению к заявленным целям их обработки.
            6.6. При обработке персональных данных обеспечивается точность персональных данных, их достаточность, а в необходимых случаях и актуальность по отношению к целям обработки персональных данных. Оператор принимает необходимые меры и/или обеспечивает их принятие по удалению или уточнению неполных или неточных данных.
            6.7. Хранение персональных данных осуществляется в форме, позволяющей определить субъекта персональных данных, не дольше, чем этого требуют цели обработки персональных данных, если срок хранения персональных данных не установлен федеральным законом, договором, стороной которого, выгодоприобретателем или поручителем по которому является субъект персональных данных. Обрабатываемые персональные данные уничтожаются либо обезличиваются по достижении целей обработки или в случае утраты необходимости в достижении этих целей, если иное не предусмотрено федеральным законом.
            
            7. Цели обработки персональных данных
            7.1. Цель обработки персональных данных Пользователя:
            – информирование Пользователя посредством отправки электронных писем;
            – предоставление доступа Пользователю к сервисам, информации и/или материалам, содержащимся на веб-сайте https://rastu-igraya.ru;
            – участие в конкурсе.
            7.2. Также Оператор имеет право направлять Пользователю уведомления о новых продуктах и услугах, специальных предложениях и различных событиях. Пользователь всегда может отказаться от получения информационных сообщений, направив Оператору письмо на адрес электронной почты rastu-igraya@internet.ru c пометкой «Отказ от уведомлений о новых продуктах и услугах и специальных предложениях».
            7.3. Обезличенные данные Пользователей, собираемые с помощью сервисов интернет-статистики, служат для сбора информации о действиях Пользователей на сайте, улучшения качества сайта и его содержания.
            
            8. Правовые основания обработки персональных данных
            8.1. Правовыми основаниями обработки персональных данных Оператором являются:
            – Федеральный закон «Об информации, информационных технологиях и о защите информации» от 27.07.2006 N 149-ФЗ;
            – федеральные законы, иные нормативно-правовые акты в сфере защиты персональных данных;
            – согласия Пользователей на обработку их персональных данных, на обработку персональных данных, разрешенных для распространения.
            8.2. Оператор обрабатывает персональные данные Пользователя только в случае их заполнения и/или отправки Пользователем самостоятельно через специальные формы, расположенные на сайте https://rastu-igraya.ru или направленные Оператору посредством электронной почты. Заполняя соответствующие формы и/или отправляя свои персональные данные Оператору, Пользователь выражает свое согласие с данной Политикой.
            8.3. Оператор обрабатывает обезличенные данные о Пользователе в случае, если это разрешено в настройках браузера Пользователя (включено сохранение файлов «cookie» и использование технологии JavaScript).
            8.4. Субъект персональных данных самостоятельно принимает решение о предоставлении его персональных данных и дает согласие свободно, своей волей и в своем интересе.
            
            9. Условия обработки персональных данных
            9.1. Обработка персональных данных осуществляется с согласия субъекта персональных данных на обработку его персональных данных.
            9.2. Обработка персональных данных необходима для достижения целей, предусмотренных международным договором Российской Федерации или законом, для осуществления возложенных законодательством Российской Федерации на оператора функций, полномочий и обязанностей.
            9.3. Обработка персональных данных необходима для осуществления правосудия, исполнения судебного акта, акта другого органа или должностного лица, подлежащих исполнению в соответствии с законодательством Российской Федерации об исполнительном производстве.
            9.4. Обработка персональных данных необходима для исполнения договора, стороной которого либо выгодоприобретателем или поручителем по которому является субъект персональных данных, а также для заключения договора по инициативе субъекта персональных данных или договора, по которому субъект персональных данных будет являться выгодоприобретателем или поручителем.
            9.5. Обработка персональных данных необходима для осуществления прав и законных интересов оператора или третьих лиц либо для достижения общественно значимых целей при условии, что при этом не нарушаются права и свободы субъекта персональных данных.
            9.6. Осуществляется обработка персональных данных, доступ неограниченного круга лиц к которым предоставлен субъектом персональных данных либо по его просьбе (далее – общедоступные персональные данные).
            9.7. Осуществляется обработка персональных данных, подлежащих опубликованию или обязательному раскрытию в соответствии с федеральным законом.
            
            10. Порядок сбора, хранения, передачи и других видов обработки персональных данных
            Безопасность персональных данных, которые обрабатываются Оператором, обеспечивается путем реализации правовых, организационных и технических мер, необходимых для выполнения в полном объеме требований действующего законодательства в области защиты персональных данных.
            10.1. Оператор обеспечивает сохранность персональных данных и принимает все возможные меры, исключающие доступ к персональным данным неуполномоченных лиц.
            10.2. Персональные данные Пользователя никогда, ни при каких условиях не будут переданы третьим лицам, за исключением случаев, связанных с исполнением действующего законодательства либо в случае, если субъектом персональных данных дано согласие Оператору на передачу данных третьему лицу для исполнения обязательств по гражданско-правовому договору.
            10.3. В случае выявления неточностей в персональных данных, Пользователь может актуализировать их самостоятельно, путем направления Оператору уведомление на адрес электронной почты Оператора rastu-igraya@internet.ru c пометкой «Актуализация персональных данных».
            10.4. Срок обработки персональных данных определяется достижением целей, для которых были собраны персональные данные, если иной срок не предусмотрен договором или действующим законодательством.
            Пользователь может в любой момент отозвать свое согласие на обработку персональных данных, направив Оператору уведомление посредством электронной почты на электронный адрес Оператора rastu-igraya@internet.ru с пометкой «Отзыв согласия на обработку персональных данных».
            10.5. Вся информация, которая собирается сторонними сервисами, в том числе платежными системами, средствами связи и другими поставщиками услуг, хранится и обрабатывается указанными лицами (Операторами) в соответствии с их Пользовательским соглашением и Политикой конфиденциальности. Субъект персональных данных и/или Пользователь обязан самостоятельно своевременно ознакомиться с указанными документами. Оператор не несет ответственность за действия третьих лиц, в том числе указанных в настоящем пункте поставщиков услуг.
            10.6. Установленные субъектом персональных данных запреты на передачу (кроме предоставления доступа), а также на обработку или условия обработки (кроме получения доступа) персональных данных, разрешенных для распространения, не действуют в случаях обработки персональных данных в государственных, общественных и иных публичных интересах, определенных законодательством РФ.
            10.7. Оператор при обработке персональных данных обеспечивает конфиденциальность персональных данных.
            10.8. Оператор осуществляет хранение персональных данных в форме, позволяющей определить субъекта персональных данных, не дольше, чем этого требуют цели обработки персональных данных, если срок хранения персональных данных не установлен федеральным законом, договором, стороной которого, выгодоприобретателем или поручителем по которому является субъект персональных данных.
            10.9. Условием прекращения обработки персональных данных может являться достижение целей обработки персональных данных, истечение срока действия согласия субъекта персональных данных или отзыв согласия субъектом персональных данных, а также выявление неправомерной обработки персональных данных.
            
            11. Перечень действий, производимых Оператором с полученными персональными данными
            11.1. Оператор осуществляет сбор, запись, систематизацию, накопление, хранение, уточнение (обновление, изменение), извлечение, использование, передачу (распространение, предоставление, доступ), обезличивание, блокирование, удаление и уничтожение персональных данных.
            11.2. Оператор осуществляет автоматизированную обработку персональных данных с получением и/или передачей полученной информации по информационно-телекоммуникационным сетям или без таковой.
            
            12. Трансграничная передача персональных данных
            12.1. Оператор до начала осуществления трансграничной передачи персональных данных обязан убедиться в том, что иностранным государством, на территорию которого предполагается осуществлять передачу персональных данных, обеспечивается надежная защита прав субъектов персональных данных.
            12.2. Трансграничная передача персональных данных на территории иностранных государств, не отвечающих вышеуказанным требованиям, может осуществляться только в случае наличия согласия в письменной форме субъекта персональных данных на трансграничную передачу его персональных данных и/или исполнения договора, стороной которого является субъект персональных данных.
            
            13. Конфиденциальность персональных данных
            Оператор и иные лица, получившие доступ к персональным данным, обязаны не раскрывать третьим лицам и не распространять персональные данные без согласия субъекта персональных данных, если иное не предусмотрено федеральным законом.
            
            14. Заключительные положения
            14.1. Пользователь может получить любые разъяснения по интересующим вопросам, касающимся обработки его персональных данных, обратившись к Оператору с помощью электронной почты rastu-igraya@internet.ru.
            14.2. В данном документе будут отражены любые изменения политики обработки персональных данных Оператором. Политика действует бессрочно до замены ее новой версией.
            
            ")) {
            echo json_encode($code);
        } else echo json_encode("fail_mail_confirm");
    }
}

// ------------------------ Регистрация --------------------------
if (isset($_GET['users']) && $_GET['users'] == '2' && isset($_GET['name']) && $_GET['name'] != '' && isset($_GET['email']) && $_GET['email'] != '' && isset($_GET['pass']) && $_GET['pass'] != '') {
    $name = $_GET['name'];
    $email = $_GET['email'];
    $pass = md5($_GET['pass']);
    $code = substr(md5(rand()), 0, 20);

    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
    if ($user) {
        echo json_encode("already_have");
    } else if (mysqli_query($connection, "INSERT INTO `users` (`id`, `code`, `name`, `email`, `password`, `regdate`, `admin`, `search_id`) VALUES (NULL, '$code', '$name', '$email', '$pass', CURRENT_TIMESTAMP, '0', '')")) {
        $newuser = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
        setcookie('userid', $newuser['id'], 0x7FFFFFFF);
        setcookie('usercode', $newuser['code'], 0x7FFFFFFF);
        echo json_encode("successful_registration");
    } else echo json_encode("fail_registration");
}

// ---------------- Код на почту для смены пароля ---------------
if (isset($_GET['forgetpass'])) {
    $email = $_GET['forgetpass'];
    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
    if (!$user) echo json_encode("unknown_email");
    else {
        $code = substr(md5(rand()), 0, 4);
        if (mail($email, 'Восстановление пароля', "Код подтверждения для восстановления пароля на сайте Расту, играя:\n" . $code)) {
            echo json_encode($code);
        } else echo json_encode("fail_mail_forgetpass");
    }
}

// ------------------ Смена пароля по идентификатору - email ----------------------

if (isset($_GET['users']) && $_GET['users'] == 'change' && isset($_GET['oldemail']) && isset($_GET['pass'])) {
    $email = $_GET['oldemail'];
    $pass = md5($_GET['pass']);
    $user = false;
    $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `email` = '$email'"));
    if (!$user) echo json_encode("unknown_email");
    else if (mysqli_query($connection, "UPDATE `users` SET `password` = '$pass' WHERE `users`.`email` = '$email'")) {
        setcookie('userid', $user['id'], 0x7FFFFFFF);
        setcookie('usercode', $user['code'], 0x7FFFFFFF);
        echo json_encode("successful_change_pass");
    } else echo json_encode("fail_change_pass");
}

// --------------------------------- Смена имени -----------------------------------

if (isset($_GET['users']) && $_GET['users'] == 'change' && isset($_GET['name']) && $visitorType != 'Guest') {
    $name = $_GET['name'];
    if (mysqli_query($connection, "UPDATE `users` SET `name` = '$name' WHERE `users`.`id` = '$visitorId'")) {
        echo json_encode("successful_change_name");
    } else echo json_encode("fail_change_name");
}

// --------------------------------- Смена Email -----------------------------------

if (isset($_GET['users']) && $_GET['users'] == 'change' && isset($_GET['email']) && $visitorType != 'Guest') {
    $email = $_GET['email'];
    if (mysqli_query($connection, "UPDATE `users` SET `email` = '$email' WHERE `users`.`id` = '$visitorId'")) {
        echo json_encode("successful_change_email");
    } else echo json_encode("fail_change_email");
}

// ------------------- Admin / User / Guest ---------------------
if (isset($_GET['cookies']) && $_GET['cookies'] == '0') {
    $visitor = [
        'type' => 'Guest',
        'name' => 'Войти',
        'email' => 'email',
        'countFavorites' => 'Избранное',
        'search' => [],
    ];

    $countSearchQuery = 8; //Количество отражаемых поисковых запросов

    if (isset($_COOKIE["userid"]) && isset($_COOKIE["usercode"])) { //Если куки содержат userid и usercode
        $user = false;
        $user = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `id` = " . $_COOKIE["userid"]));
        if ($user && $user['code'] == $_COOKIE["usercode"]) { //Если такой юзер есть и его код соответствует БД
            $user['admin'] == 1 ? $visitor['type'] = 'Admin' : $visitor['type'] = 'User';
            $visitor['name'] = $user['name'];
            $visitor['email'] = $user['email'];
            $visitor['countFavorites'] = mysqli_fetch_assoc(mysqli_query($connection, "SELECT COUNT(*) FROM `users_cards` WHERE `users_cards`.`users_id` = " . $_COOKIE["userid"]))["COUNT(*)"];
            $user['search_id'] != "" ? $userSearchListId = explode(' ', $user['search_id']) : $userSearchListId = [];
            for ($i = 0; $i < count($userSearchListId) && $i < $countSearchQuery; $i++) {
                $visitor['search'][] = mysqli_fetch_assoc(mysqli_query($connection, "SELECT `text` FROM `search` WHERE `id` = " . $userSearchListId[$i]))['text'];
            }
        }
    }

    if (count($visitor['search']) < $countSearchQuery) {
        $popularSearch = mysqli_query($connection, "SELECT * FROM `search` ORDER BY `count` DESC LIMIT " . $countSearchQuery);

        while (count($visitor['search']) < $countSearchQuery) {
            $popularSearchItem = mysqli_fetch_assoc($popularSearch)['text'];
            $check = 0;
            foreach ($visitor['search'] as $visitorSearchItem) {
                if ($popularSearchItem == $visitorSearchItem) $check++;
            }
            if ($check == 0) $visitor['search'][] = $popularSearchItem;
        }
    }

    echo json_encode($visitor);
}


// -------------------------- Catalog ----------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == "get") {
    $catalog = [];

    $catalog1Items = mysqli_query($connection, "SELECT * FROM `catalog1`");
    while (($catalog1Item = mysqli_fetch_assoc($catalog1Items))) {
        $catalog[$catalog1Item['id']] = ['title' => $catalog1Item['title'], 'list' => []];

        $catalog2Items = mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog1_id` = " . $catalog1Item['id']);
        while (($catalog2Item = mysqli_fetch_assoc($catalog2Items))) {
            $catalog[$catalog1Item['id']]['list'][$catalog2Item['id']] = ['title' => $catalog2Item['title'], 'list' => []];

            $catalog3Items = mysqli_query($connection, "SELECT * FROM `catalog3` WHERE `catalog2_id` = " . $catalog2Item['id']);
            while (($catalog3Item = mysqli_fetch_assoc($catalog3Items))) {
                $catalog[$catalog1Item['id']]['list'][$catalog2Item['id']]['list'][$catalog3Item['id']] = $catalog3Item['title'];
            }
        }
    }

    echo json_encode($catalog);
}


// ---------------------------- Путь до каталога ----------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == 'path' && isset($_GET['level']) && isset($_GET['id'])) {
    $catalogId = $_GET['id'];
    $catalogPath = [];
    // $i = (int) $_GET['level'];

    for ($i = $_GET['level']; $i > 0; $i--) {
        $catalogLevel = "catalog" . $i;

        $catalog = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `$catalogLevel` WHERE `id` = '$catalogId'"));
        $catalogPath[$i] = [
            'id' => $catalog['id'],
            'title' => $catalog['title'],
        ];

        if ($i > 1) {
            $catalogId = $catalog["catalog" . $i - 1 . "_id"];
        }
    }
    echo json_encode($catalogPath);
}


// ------------------ Путь до новой карточки --------------------

if (isset($_GET['card']) && $_GET['card'] == 'path' && isset($_GET['catalog1id']) && isset($_GET['catalog2id']) && isset($_GET['catalog3id'])) {
    $catalog1Id = $_GET['catalog1id'];
    $catalog2Id = $_GET['catalog2id'];
    $catalog3Id = $_GET['catalog3id'];
    $cardPath = [];

    $catalog1Title = "";
    $catalog2Title = "";
    $catalog3Title = "";

    if ($catalog1Id) $catalog1Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog1` WHERE `catalog1`.`id` = '$catalog1Id'"))['title'];
    if ($catalog2Id) $catalog2Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog2`.`id` = '$catalog2Id'"))['title'];
    if ($catalog3Id) $catalog3Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog3` WHERE `catalog3`.`id` = '$catalog3Id'"))['title'];

    $cardPath['catalog1Title'] = [$catalog1Title];
    $cardPath['catalog2Title'] = [$catalog2Title];
    $cardPath['catalog3Title'] = [$catalog3Title];

    echo json_encode($cardPath);
}


// -------------------- Все данные карточки ---------------------

if (isset($_GET['card']) && $_GET['card'] == 'get' && isset($_GET['id'])) {
    $cardId = $_GET['id'];
    $cardArr = [];

    if ($card = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`id` = '$cardId'"))) {
        $catalog1Id = $card['catalog1_id'];
        $catalog2Id = $card['catalog2_id'];
        $catalog3Id = $card['catalog3_id'];

        $catalog1Title = "";
        $catalog2Title = "";
        $catalog3Title = "";

        if ($catalog1Id) $catalog1Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog1` WHERE `catalog1`.`id` = '$catalog1Id'"))['title'];
        if ($catalog2Id) $catalog2Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog2`.`id` = '$catalog2Id'"))['title'];
        if ($catalog3Id) $catalog3Title = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog3` WHERE `catalog3`.`id` = '$catalog3Id'"))['title'];

        $cardArr['catalog1'] = [
            'id' => $catalog1Id,
            'title' => $catalog1Title
        ];

        $cardArr['catalog2'] = [
            'id' => $catalog2Id,
            'title' => $catalog2Title
        ];

        $cardArr['catalog3'] = [
            'id' => $catalog3Id,
            'title' => $catalog3Title
        ];

        $cardArr['title'] = $card['title'];
        $cardArr['img'] = $card['img'];
        $cardArr['description'] = $card['description'];
        $cardArr['rating1'] = $card['rating1'];
        $cardArr['rating2'] = $card['rating2'];
        $cardArr['rating3'] = $card['rating3'];
        $cardArr['rating4'] = $card['rating4'];
        $cardArr['rating5'] = $card['rating5'];

        echo json_encode($cardArr);
    } else {
        echo json_encode("none");
    }
}

// ------------------- Список подкатегорий ----------------------
if (isset($_GET['catalog']) && $_GET['catalog'] == 'list' && isset($_GET['level']) && isset($_GET['id'])) {
    $catalogLevel = "catalog" . $_GET['level'] + 1;
    $catalogLevelId = "catalog" . $_GET['level'] . "_id";
    $catalogId = $_GET['id'];
    $categoriesList = [];

    $categories = mysqli_query($connection, "SELECT * FROM `$catalogLevel` WHERE `$catalogLevelId` = '$catalogId'");
    while (($category = mysqli_fetch_assoc($categories))) {
        $categoriesList[] = [
            'id' => $category['id'],
            'title' => $category['title'],
            'img' => $category['img'],
        ];
    }
    if ($categoriesList) echo json_encode($categoriesList);
    else echo json_encode("none");
}

// ------------------- Список каточек ----------------------
if (isset($_GET['catalog']) && $_GET['catalog'] == 'cards' && isset($_GET['level']) && isset($_GET['id']) && isset($_GET['cardscount']) && isset($_GET['cardssum'])) {
    $catalogLevelId = "catalog" . $_GET['level'] . "_id";
    $catalogId = $_GET['id'];
    $cardscount = $_GET['cardscount'];
    $cardssum = $_GET['cardssum'];
    $cardsList = [];
    $cards = mysqli_query($connection, "SELECT * FROM `cards` WHERE `$catalogLevelId` = '$catalogId' ORDER BY `cards`.`popularity` DESC LIMIT $cardscount, $cardssum");
    while (($card = mysqli_fetch_assoc($cards))) {
        if (($card['rating1'] + $card['rating2'] + $card['rating3'] + $card['rating4'] + $card['rating5']) > 0) {
            $rating = round(($card['rating1'] + $card['rating2'] * 2 + $card['rating3'] * 3 + $card['rating4'] * 4 + $card['rating5'] * 5) / ($card['rating1'] + $card['rating2'] + $card['rating3'] + $card['rating4'] + $card['rating5']));
        } else {
            $rating = 0;
        }
        $cardsList[] = [
            'id' => $card['id'],
            'title' => $card['title'],
            'img' => $card['img'],
            'rating' => $rating,
        ];
    }
    if ($cardsList) {
        echo json_encode($cardsList);
    } else {
        echo json_encode("none");
    }
}

// ------------- Добавление элементов каталога 1 уровня ------------

if (isset($_GET['catalog1']) && $_GET['catalog1'] == 'create' && isset($_GET['title']) && $_GET['title'] != "" && $visitorType == 'Admin') {
    $title = $_GET['title'];
    if (mysqli_query($connection, "INSERT INTO `catalog1` (`id`, `title`) VALUES (NULL, '$title')")) {
        echo json_encode("Новый раздел создан успешно.");
    } else {
        echo json_encode("Не удалось создать новый раздел. Ошибка: " . mysqli_error($connection));
    }
}

//-------- изменение элементов каталога 1 уровня по карандашу -------

if (isset($_GET['catalog1']) && $_GET['catalog1'] == 'change' && isset($_GET['id']) && isset($_GET['newtitle']) && $_GET['newtitle'] != "" && $visitorType == 'Admin') {
    $id = $_GET['id'];
    $newtitle = $_GET['newtitle'];
    if (mysqli_query($connection, "UPDATE `catalog1` SET `title` = '$newtitle' WHERE `catalog1`.`id` = '$id'")) {
        echo json_encode("Раздел изменён успешно.");
    } else {
        echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
    }
}

// ------------- Удаление элементов каталога 1 уровня ------------

// if (isset($_GET['catalog1']) && $_GET['catalog1'] == 'delete' && isset($_GET['id']) && $visitorType == 'Admin') {
//     $id = $_GET['id'];
//     $del1 = true;
//     $del2 = true;
//     $del3 = true;
//     $delCards = true;

//     $catalog2Items = mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog1_id` = " . $id);
//     while (($catalog2Item = mysqli_fetch_assoc($catalog2Items))) {
//         if (!mysqli_query($connection, "DELETE FROM `catalog3` WHERE `catalog3`.`catalog2_id` = " . $catalog2Item['id'])) $del3 = false;
//     }

//     if (!mysqli_query($connection, "DELETE FROM `catalog2` WHERE `catalog2`.`catalog1_id` = " . $id)) $del2 = false;

//     if (!mysqli_query($connection, "DELETE FROM `catalog1` WHERE `catalog1`.`id` = " . $id)) $del3 = false;

//     $deletedCards = mysqli_query($connection, "SELECT * FROM `cards` WHERE `catalog1_id` = " . $id);
//     while (($deletedCard = mysqli_fetch_assoc($deletedCards))) {
//         if (file_exists($directoryCardsImg . $deletedCard['img'])) {
//             if (!unlink($directoryCardsImg . $deletedCard['img'])) $delCards = false;
//         }
//     }

//     if (!mysqli_query($connection, "DELETE FROM `cards` WHERE `cards`.`catalog1_id` = " . $id)) $delCards = false;

//     if ($del1 && $del2 && $del3 && $delCards) {
//         echo json_encode("Раздел удалён.");
//     } else {
//         echo json_encode("Не удалось удалить раздел или некоторые его составляющие.");
//     }
// }


// ----------------------- Добавление элементов каталога 2 и 3 уровня ----------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == 'new' && isset($_GET['level']) && isset($_GET['id']) && isset($_GET['title']) && isset($_GET['img']) && $visitorType == 'Admin') {
    $catalogLevel = "catalog" . $_GET['level'] + 1;
    $catalogLevelId = "catalog" . $_GET['level'] . "_id";
    $title = $_GET['title'];
    $catalogId = $_GET['id'];
    $img = $_GET['img'];
    if (file_exists($directoryCatalogsImg . $img)) {
        if (mysqli_query($connection, "INSERT INTO `$catalogLevel` (`id`, `title`, `$catalogLevelId`, `img`) VALUES (NULL, '$title', '$catalogId', '$img')")) {
            echo json_encode("OK");
        } else echo json_encode("Не удалось создать новый раздел. Ошибка: " . mysqli_error($connection));
    } else echo json_encode("notExist");
}


// ----------------------- Изменение названия каталога 2 и 3 уровня ----------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == 'change' && isset($_GET['level']) && isset($_GET['id']) && isset($_GET['title']) && $visitorType == 'Admin') {
    $catalogLevel = "catalog" . $_GET['level'];
    $id = $_GET['id'];
    $title = $_GET['title'];
    if (mysqli_query($connection, "UPDATE `$catalogLevel` SET `title` = '$title' WHERE `$catalogLevel`.`id` = '$id'")) {
        echo json_encode("OK");
    } else {
        echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
    }
}


// ----------------------- Изменение картинки каталога 2 и 3 уровня ---------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == 'change' && isset($_GET['level']) && isset($_GET['id']) && isset($_GET['img']) && $visitorType == 'Admin') {
    $catalogLevel = "catalog" . $_GET['level'];
    $id = $_GET['id'];
    $img = $_GET['img'];
    if (file_exists($directoryCatalogsImg . $img)) {
        if (mysqli_query($connection, "UPDATE `$catalogLevel` SET `img` = '$img' WHERE `$catalogLevel`.`id` = '$id'")) {
            echo json_encode("OK");
        } else {
            echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
        }
    } else echo json_encode("notExist");
}


// ------------------------ Удаление элементов каталога 1, 2 и 3 уровня ---------------------------

if (isset($_GET['catalog']) && $_GET['catalog'] == 'delete' && isset($_GET['level']) && isset($_GET['id']) && $visitorType == 'Admin') {
    // $i = $_GET['level'];
    $catalogLevel = "catalog" . $_GET['level'];
    $catalogLevelId = "catalog" . $_GET['level'] . "_id";
    $id = $_GET['id'];

    $del1 = true;
    $del2 = true;
    $del3 = true;
    $delCards = true;


    if ($cardImg = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `$catalogLevel` WHERE `$catalogLevel`.`id` = " . $id))['img']) {
        $cardsWithThisImg2 = mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog2`.`img` = '$cardImg'");
        $cardsWithThisImg3 = mysqli_query($connection, "SELECT * FROM `catalog3` WHERE `catalog3`.`img` = '$cardImg'");
        if (mysqli_num_rows($cardsWithThisImg2) + mysqli_num_rows($cardsWithThisImg3) == 1) {
            if (file_exists($directoryCatalogsImg . $cardImg)) {
                if (!unlink($directoryCatalogsImg . $cardImg)) $delCards = false;
            }
        }
    }

    $deletedCards = mysqli_query($connection, "SELECT * FROM `cards` WHERE `$catalogLevelId` = " . $id);
    while (($deletedCard = mysqli_fetch_assoc($deletedCards))) {
        $deletedCardImg = $deletedCard['img'];
        $cardsWithThisImg = mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`img` = '$deletedCardImg' AND `$catalogLevelId` != '$id'");
        if (mysqli_num_rows($cardsWithThisImg) == 0) {
            if (file_exists($directoryCardsImg . $deletedCard['img'])) {
                if (!unlink($directoryCardsImg . $deletedCard['img'])) $delCards = false;
            }
        }
        if (!mysqli_query($connection, "DELETE FROM `comments` WHERE `comments`.`card_id` = " . $deletedCard['id'])) $delCards = false;
    }

    if ($_GET['level'] == 1) {
        $catalog2Items = mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog1_id` = " . $id);
        while (($catalog2Item = mysqli_fetch_assoc($catalog2Items))) {
            if (!mysqli_query($connection, "DELETE FROM `catalog3` WHERE `catalog3`.`catalog2_id` = " . $catalog2Item['id'])) $del3 = false;
        }

        if (!mysqli_query($connection, "DELETE FROM `catalog2` WHERE `catalog2`.`catalog1_id` = " . $id)) $del2 = false;

        if (!mysqli_query($connection, "DELETE FROM `catalog1` WHERE `catalog1`.`id` = " . $id)) $del1 = false;
    }

    if ($_GET['level'] == 2) {
        if (!mysqli_query($connection, "DELETE FROM `catalog3` WHERE `catalog3`.`catalog2_id` = " . $id)) $del3 = false;

        if (!mysqli_query($connection, "DELETE FROM `catalog2` WHERE `catalog2`.`id` = " . $id)) $del2 = false;
    }

    if ($_GET['level'] == 3) {
        if (!mysqli_query($connection, "DELETE FROM `catalog3` WHERE `catalog3`.`id` = " . $id)) $del3 = false;
    }

    if (!mysqli_query($connection, "DELETE FROM `cards` WHERE `cards`.`$catalogLevelId` = " . $id)) $delCards = false;

    if ($del1 && $del2 && $del3 && $delCards) {
        echo json_encode("Раздел удалён.");
    } else {
        echo json_encode("Не удалось удалить раздел или некоторые его составляющие.");
    }
}

// ---------------- Популярные категории -----------------
if (isset($_GET['popcat'])) {
    $popCategoriesList = [];
    $popCategories = mysqli_query($connection, "SELECT * FROM `catalog2` ORDER BY `catalog2`.`popularity` DESC LIMIT 10");
    while (($popCategory = mysqli_fetch_assoc($popCategories))) {
        $popCategoriesList[] = [
            'id' => $popCategory['id'],
            'title' => $popCategory['title'],
            'img' => $popCategory['img'],
        ];
    }
    echo json_encode($popCategoriesList);
}

// ---------------- Популярные карточки -----------------
if (isset($_GET['popcards']) && $_GET['popcards'] == 'get' && isset($_GET['cardscount']) && isset($_GET['cardssum'])) {
    $cardscount = $_GET['cardscount'];
    $cardssum = $_GET['cardssum'];
    $popCardsList = [];
    $popCards = mysqli_query($connection, "SELECT * FROM `cards` ORDER BY `cards`.`popularity` DESC LIMIT $cardscount, $cardssum");
    while (($popCard = mysqli_fetch_assoc($popCards))) {
        if (($popCard['rating1'] + $popCard['rating2'] + $popCard['rating3'] + $popCard['rating4'] + $popCard['rating5']) > 0) {
            $rating = round(($popCard['rating1'] + $popCard['rating2'] * 2 + $popCard['rating3'] * 3 + $popCard['rating4'] * 4 + $popCard['rating5'] * 5) / ($popCard['rating1'] + $popCard['rating2'] + $popCard['rating3'] + $popCard['rating4'] + $popCard['rating5']));
        } else {
            $rating = 0;
        }
        $popCardsList[] = [
            'id' => $popCard['id'],
            'title' => $popCard['title'],
            'img' => $popCard['img'],
            'rating' => $rating,
        ];
    }
    if ($popCardsList) {
        echo json_encode($popCardsList);
    } else {
        echo json_encode("none");
    }
}


// ----------------------- Увеличить популярность карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'boost' && isset($_GET['id'])) {
    $response = "OK";
    $id = $_GET['id'];
    $card = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`id` = '$id'"));
    $cardPopularity = $card['popularity'] + 1;
    if (!mysqli_query($connection, "UPDATE `cards` SET `popularity` = '$cardPopularity' WHERE `cards`.`id` = '$id'")) {
        $response = "fail";
    }

    $catalog2Id = $card['catalog2_id'];
    $catalog2 = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `catalog2` WHERE `catalog2`.`id` = '$catalog2Id'"));
    if ($catalog2) {
        $catalog2popularity = $catalog2['popularity'] + 1;
        if (!mysqli_query($connection, "UPDATE `catalog2` SET `popularity` = '$catalog2popularity' WHERE `catalog2`.`id` = '$catalog2Id'")) {
            $response = "fail";
        }
    }
    echo json_encode($response);
}

// ---------------------------------- Список отзывов ---------------------------------
if (isset($_GET['comment']) && $_GET['comment'] == 'get' && isset($_GET['cardid']) && isset($_GET['sum'])) {
    $response = "OK";
    $cardId = $_GET['cardid'];
    $sum = $_GET['sum'];
    $commentsArr = [];

    if ($sum == "all") {
        $comments = mysqli_query($connection, "SELECT * FROM `comments` WHERE `comments`.`card_id` = '$cardId' AND `comments`.`moderation` = '1' ORDER BY `id` DESC");
    } else {
        $comments = mysqli_query($connection, "SELECT * FROM `comments` WHERE `comments`.`card_id` = '$cardId' AND `comments`.`moderation` = '1' ORDER BY `id` DESC LIMIT $sum");
    }

    if (mysqli_num_rows($comments) == 0) {
        echo json_encode("none");
    } else {
        while (($comment = mysqli_fetch_assoc($comments))) {
            $commentUserId = $comment["user_id"];
            $username = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users` WHERE `users`.`id` = '$commentUserId'"))["name"];
            $date = date_parse($comment['pubdate']);
            switch ($date["month"]) {
                case 1:
                    $month = "января";
                    break;
                case 2:
                    $month = "февраля";
                    break;
                case 3:
                    $month = "марта";
                    break;
                case 4:
                    $month = "апреля";
                    break;
                case 5:
                    $month = "мая";
                    break;
                case 6:
                    $month = "июня";
                    break;
                case 7:
                    $month = "июля";
                    break;
                case 8:
                    $month = "августа";
                    break;
                case 9:
                    $month = "сентября";
                    break;
                case 10:
                    $month = "октября";
                    break;
                case 11:
                    $month = "ноября";
                    break;
                case 12:
                    $month = "декабря";
                    break;
            }

            $commentDate = $date['day'] . " " . $month . " " . $date['year'];

            $commentsArr[] = [
                'id' => $comment['id'],
                'username' => $username,
                'rating' => $comment['rating'],
                'text' => $comment['text'],
                'likecount' => $comment['like_count'],
                'dislikecount' => $comment['dislike_count'],
                'date' => $commentDate,
            ];
        }
        echo json_encode($commentsArr);
    }
}

// ------------------------------ Оставить отзыв ---------------------------------
if (isset($_GET['comment']) && $_GET['comment'] == 'set' && isset($_GET['cardid']) && isset($_GET['rating']) && isset($_GET['text']) && $visitorType != "Guest") {
    $cardid = $_GET['cardid'];
    $rating = $_GET['rating'];
    $ratingTitle = "rating" . $_GET['rating'];
    $text = $_GET['text'];
    $response = "OK";
    if ($text != "") {
        if (!mysqli_query($connection, "INSERT INTO `comments` (`id`, `moderation`, `card_id`, `pubdate`, `user_id`, `rating`, `text`, `like_count`, `dislike_count`) VALUES (NULL, '$needFeedbackModeration', '$cardid', CURRENT_TIMESTAMP, '$visitorId', '$rating', '$text', '0', '0')")) $response = "fail";
    }
    $countStars = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`id` = '$cardid'"))[$ratingTitle];
    $countStars++;
    if (!mysqli_query($connection, "UPDATE `cards` SET `$ratingTitle` = '$countStars' WHERE `cards`.`id` = '$cardid'")) $response = "fail";
    echo json_encode($response);
}

// ------------------------- Лайкнуть/дизлайкнуть отзыв --------------------------
if (isset($_GET['comment']) && $_GET['comment'] == 'like' && isset($_GET['id']) && $visitorType != "Guest") {
    $id = $_GET['id'];
    $response = "OK";
    $countLike = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `comments` WHERE `comments`.`id` = '$id'"))['like_count'];
    $countLike++;
    if (!mysqli_query($connection, "UPDATE `comments` SET `like_count` = '$countLike' WHERE `comments`.`id` = '$id'")) $response = "fail";
    echo json_encode($response);
}

if (isset($_GET['comment']) && $_GET['comment'] == 'dislike' && isset($_GET['id']) && $visitorType != "Guest") {
    $id = $_GET['id'];
    $response = "OK";
    $countDislike = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `comments` WHERE `comments`.`id` = '$id'"))['dislike_count'];
    $countDislike++;
    if (!mysqli_query($connection, "UPDATE `comments` SET `dislike_count` = '$countDislike' WHERE `comments`.`id` = '$id'")) $response = "fail";
    echo json_encode($response);
}

// ----------------------- Изменение изображения карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'change' && isset($_GET['id']) && isset($_GET['img']) && $visitorType == 'Admin') {
    $id = $_GET['id'];
    $img = $_GET['img'];
    if (file_exists($directoryCardsImg . $img)) {
        if (mysqli_query($connection, "UPDATE `cards` SET `img` = '$img' WHERE `cards`.`id` = '$id'")) {
            echo json_encode("OK");
        } else {
            echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
        }
    } else echo json_encode("notExist");
}

// ----------------------- Изменение названия карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'change' && isset($_GET['id']) && isset($_GET['title']) && $visitorType == 'Admin') {
    $id = $_GET['id'];
    $title = $_GET['title'];
    if (mysqli_query($connection, "UPDATE `cards` SET `title` = '$title' WHERE `cards`.`id` = '$id'")) {
        echo json_encode("OK");
    } else {
        echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
    }
}

// ----------------------- Изменение описания карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'change' && isset($_GET['id']) && isset($_GET['description']) && $visitorType == 'Admin') {
    $id = $_GET['id'];
    $description = $_GET['description'];
    if (mysqli_query($connection, "UPDATE `cards` SET `description` = '$description' WHERE `cards`.`id` = '$id'")) {
        echo json_encode("OK");
    } else {
        echo json_encode("Не удалось изменить раздел. Ошибка: " . mysqli_error($connection));
    }
}

// ----------------------- Удаление карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'delete' && isset($_GET['id']) && $visitorType == 'Admin') {
    $id = $_GET['id'];
    $delCards = true;

    $deletedCard = mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`id` = '$id'"));
    $deletedCardImg = $deletedCard['img'];
    $cardsWithThisImg = mysqli_query($connection, "SELECT * FROM `cards` WHERE `cards`.`img` = '$deletedCardImg' AND `id` != '$id'");
    if (mysqli_num_rows($cardsWithThisImg) == 0) {
        if (file_exists($directoryCardsImg . $deletedCard['img'])) {
            if (!unlink($directoryCardsImg . $deletedCard['img'])) $delCards = false;
        }
    }
    if (!mysqli_query($connection, "DELETE FROM `cards` WHERE `cards`.`id` = '$id'")) $delCards = false;
    if (!mysqli_query($connection, "DELETE FROM `comments` WHERE `comments`.`card_id` = '$id'")) $delCards = false;
    if ($delCards) {
        echo json_encode("Карточка удалена.");
    } else {
        echo json_encode("Не удалось удалить карточку, картинку или комментарии к карточке.");
    }
}

// ----------------------- Создание карточки ---------------------------
if (isset($_GET['card']) && $_GET['card'] == 'new' && isset($_GET['title']) && isset($_GET['img']) && isset($_GET['description']) && isset($_GET['catalog1id']) && isset($_GET['catalog2id']) && isset($_GET['catalog3id']) && $visitorType == 'Admin') {
    $title = $_GET['title'];
    $img = $_GET['img'];
    $description = $_GET['description'];
    $catalog1Id = $_GET['catalog1id'];
    $catalog2Id = $_GET['catalog2id'];
    $catalog3Id = $_GET['catalog3id'];

    if (file_exists($directoryCardsImg . $img)) {
        if (mysqli_query($connection, "INSERT INTO `cards` (`id`, `catalog1_id`, `catalog2_id`, `catalog3_id`, `title`, `img`, `description`, `rating1`, `rating2`, `rating3`, `rating4`, `rating5`, `popularity`) VALUES (NULL, '$catalog1Id', '$catalog2Id', '$catalog3Id', '$title', '$img', '$description', '0', '0', '0', '0', '0', '0');")) {
            echo json_encode("OK");
        } else echo json_encode("Не удалось создать новую карточку. Ошибка: " . mysqli_error($connection));
    } else echo json_encode("notExist");
}

// ------------------- Избранные карточки ---------------------
if (isset($_GET['favcards']) && $_GET['favcards'] == 'get' && $visitorType != 'Guest') {
    $favCardsList = [];
    $favCards = mysqli_query($connection, "SELECT * FROM `users_cards` JOIN `cards` ON `users_cards`.`cards_id` = `cards`.`id` WHERE `users_cards`.`users_id` = '$visitorId' ORDER BY `users_cards`.`id` DESC");
    while ($favCard = mysqli_fetch_assoc($favCards)) {
        $favCardsList[] = [
            'id' => $favCard['id'],
            'title' => $favCard['title'],
            'img' => $favCard['img'],
        ];
    }
    echo json_encode($favCardsList);
}

// ------------------------- Добавить в избранные ------------------------------
if (isset($_GET['favcards']) && $_GET['favcards'] == 'add' &&  isset($_GET['id']) && $visitorType != 'Guest') {
    $cardId = $_GET['id'];
    if (!mysqli_fetch_assoc(mysqli_query($connection, "SELECT * FROM `users_cards` WHERE `users_cards`.`users_id` = '$visitorId' AND `users_cards`.`cards_id` = '$cardId'"))) {
        if (mysqli_query($connection, "INSERT INTO `users_cards` (`id`, `users_id`, `cards_id`) VALUES (NULL, '$visitorId', '$cardId')")) {
            echo json_encode('OK');
        } else {
            echo json_encode('fail');
        }
    } else {
        echo json_encode('already have');
    }
}

// ------------------------- Удалить из избранных ------------------------------
if (isset($_GET['favcards']) && $_GET['favcards'] == 'remove' &&  isset($_GET['id']) && $visitorType != 'Guest') {
    $cardId = $_GET['id'];
    if (mysqli_query($connection, "DELETE FROM `users_cards` WHERE `users_cards`.`users_id` = '$visitorId' AND `users_cards`.`cards_id` = '$cardId'")) {
        echo json_encode('OK');
    } else {
        echo json_encode('fail');
    }
}


// Отключение от БД
mysqli_close($connection);
